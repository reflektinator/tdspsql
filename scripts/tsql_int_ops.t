-- OPERATORS

CREATE FUNCTION tsql_@TYPE_NAME1@_eq_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS BOOL AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR = ( PROCEDURE = tsql_@TYPE_NAME1@_eq_@TYPE_NAME2@,
  LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@,
  COMMUTATOR = =, NEGATOR = !=,
  RESTRICT = eqsel, JOIN = eqjoinsel,
  MERGES 
);
CREATE FUNCTION tsql_@TYPE_NAME1@_ne_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS BOOL AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR != ( PROCEDURE = tsql_@TYPE_NAME1@_ne_@TYPE_NAME2@,
  LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@,
  COMMUTATOR = !=, NEGATOR = =,
  RESTRICT = neqsel, JOIN = neqjoinsel
);
CREATE FUNCTION tsql_@TYPE_NAME1@_lt_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS BOOL AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR < ( PROCEDURE = tsql_@TYPE_NAME1@_lt_@TYPE_NAME2@,
  LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@,
  COMMUTATOR = >, NEGATOR = >=,
  RESTRICT = scalarltsel, JOIN = scalarltjoinsel
);
CREATE FUNCTION tsql_@TYPE_NAME1@_le_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS BOOL AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR <= (PROCEDURE = tsql_@TYPE_NAME1@_le_@TYPE_NAME2@,
  LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@,
  COMMUTATOR = >=, NEGATOR = >,
  RESTRICT = scalarltsel, JOIN = scalarltjoinsel
);
CREATE FUNCTION tsql_@TYPE_NAME1@_gt_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS BOOL AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR > (PROCEDURE = tsql_@TYPE_NAME1@_gt_@TYPE_NAME2@,
  LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@,
  COMMUTATOR = <, NEGATOR = <=,
  RESTRICT = scalargtsel, JOIN = scalargtjoinsel
);
CREATE FUNCTION tsql_@TYPE_NAME1@_ge_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS BOOL AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR >= (PROCEDURE = tsql_@TYPE_NAME1@_ge_@TYPE_NAME2@,
  LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@,
  COMMUTATOR = <=, NEGATOR = <,
  RESTRICT = scalargtsel, JOIN = scalargtjoinsel
);

CREATE FUNCTION tsql_@TYPE_NAME1@_pl_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS tsql_@TYPE_NAME3@ AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR + ( PROCEDURE = tsql_@TYPE_NAME1@_pl_@TYPE_NAME2@, LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@, COMMUTATOR = +);
CREATE FUNCTION tsql_@TYPE_NAME1@_mi_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS tsql_@TYPE_NAME3@ AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR - ( PROCEDURE = tsql_@TYPE_NAME1@_mi_@TYPE_NAME2@, LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@);
CREATE FUNCTION tsql_@TYPE_NAME1@_mul_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS tsql_@TYPE_NAME3@ AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR * ( PROCEDURE = tsql_@TYPE_NAME1@_mul_@TYPE_NAME2@, LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@, COMMUTATOR = *);
CREATE FUNCTION tsql_@TYPE_NAME1@_div_@TYPE_NAME2@(tsql_@TYPE_NAME1@, tsql_@TYPE_NAME2@) RETURNS tsql_@TYPE_NAME3@ AS '/home/james/tdspsql/tdspsql.so' LANGUAGE C IMMUTABLE STRICT;
CREATE OPERATOR / ( PROCEDURE = tsql_@TYPE_NAME1@_div_@TYPE_NAME2@, LEFTARG = tsql_@TYPE_NAME1@, RIGHTARG = tsql_@TYPE_NAME2@);

